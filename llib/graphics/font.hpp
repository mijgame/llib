#ifndef LLIB_FONT_HPP
#define LLIB_FONT_HPP

#include <array>
#include <graphics/image.hpp>
#include <cstdint>

namespace llib::graphics {
    class font {
        constexpr static std::array<image<8, 8>, 128> images = {
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0000
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0001
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0002
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0003
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0004
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0005
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0006
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0007
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0008
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0009
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+000A
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+000B
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+000C
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+000D
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+000E
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+000F
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0010
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0011
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0012
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0013
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0014
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0015
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0016
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0017
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0018
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0019
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+001A
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+001B
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+001C
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+001D
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+001E
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+001F
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0020 ( )
            image<8, 8>( 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00 ), // U+0021 (!)
            image<8, 8>( 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0022 (")
            image<8, 8>( 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00 ), // U+0023 (#)
            image<8, 8>( 0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00 ), // U+0024 ($)
            image<8, 8>( 0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00 ), // U+0025 (%)
            image<8, 8>( 0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00 ), // U+0026 (&)
            image<8, 8>( 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0027 (')
            image<8, 8>( 0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00 ), // U+0028 (()
            image<8, 8>( 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00 ), // U+0029 ())
            image<8, 8>( 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00 ), // U+002A (*)
            image<8, 8>( 0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00 ), // U+002B (+)
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06 ), // U+002C (,)
            image<8, 8>( 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00 ), // U+002D (-)
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00 ), // U+002E (.)
            image<8, 8>( 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00 ), // U+002F (/)
            image<8, 8>( 0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00 ), // U+0030 (0)
            image<8, 8>( 0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00 ), // U+0031 (1)
            image<8, 8>( 0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00 ), // U+0032 (2)
            image<8, 8>( 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00 ), // U+0033 (3)
            image<8, 8>( 0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00 ), // U+0034 (4)
            image<8, 8>( 0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00 ), // U+0035 (5)
            image<8, 8>( 0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00 ), // U+0036 (6)
            image<8, 8>( 0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00 ), // U+0037 (7)
            image<8, 8>( 0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00 ), // U+0038 (8)
            image<8, 8>( 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00 ), // U+0039 (9)
            image<8, 8>( 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00 ), // U+003A (:)
            image<8, 8>( 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06 ), // U+003B (/)
            image<8, 8>( 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00 ), // U+003C (<)
            image<8, 8>( 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00 ), // U+003D (=)
            image<8, 8>( 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00 ), // U+003E (>)
            image<8, 8>( 0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00 ), // U+003F (?)
            image<8, 8>( 0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00 ), // U+0040 (@)
            image<8, 8>( 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00 ), // U+0041 (A)
            image<8, 8>( 0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00 ), // U+0042 (B)
            image<8, 8>( 0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00 ), // U+0043 (C)
            image<8, 8>( 0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00 ), // U+0044 (D)
            image<8, 8>( 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00 ), // U+0045 (E)
            image<8, 8>( 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00 ), // U+0046 (F)
            image<8, 8>( 0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00 ), // U+0047 (G)
            image<8, 8>( 0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00 ), // U+0048 (H)
            image<8, 8>( 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 ), // U+0049 (I)
            image<8, 8>( 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00 ), // U+004A (J)
            image<8, 8>( 0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00 ), // U+004B (K)
            image<8, 8>( 0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00 ), // U+004C (L)
            image<8, 8>( 0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00 ), // U+004D (M)
            image<8, 8>( 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00 ), // U+004E (N)
            image<8, 8>( 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00 ), // U+004F (O)
            image<8, 8>( 0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00 ), // U+0050 (P)
            image<8, 8>( 0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00 ), // U+0051 (Q)
            image<8, 8>( 0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00 ), // U+0052 (R)
            image<8, 8>( 0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00 ), // U+0053 (S)
            image<8, 8>( 0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 ), // U+0054 (T)
            image<8, 8>( 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00 ), // U+0055 (U)
            image<8, 8>( 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00 ), // U+0056 (V)
            image<8, 8>( 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00 ), // U+0057 (W)
            image<8, 8>( 0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00 ), // U+0058 (X)
            image<8, 8>( 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00 ), // U+0059 (Y)
            image<8, 8>( 0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00 ), // U+005A (Z)
            image<8, 8>( 0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00 ), // U+005B ([)
            image<8, 8>( 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00 ), // U+005C (\)
            image<8, 8>( 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00 ), // U+005D (])
            image<8, 8>( 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00 ), // U+005E (^)
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF ), // U+005F (_)
            image<8, 8>( 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+0060 (`)
            image<8, 8>( 0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00 ), // U+0061 (a)
            image<8, 8>( 0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00 ), // U+0062 (b)
            image<8, 8>( 0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00 ), // U+0063 (c)
            image<8, 8>( 0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00 ), // U+0064 (d)
            image<8, 8>( 0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00 ), // U+0065 (e)
            image<8, 8>( 0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00 ), // U+0066 (f)
            image<8, 8>( 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F ), // U+0067 (g)
            image<8, 8>( 0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00 ), // U+0068 (h)
            image<8, 8>( 0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 ), // U+0069 (i)
            image<8, 8>( 0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E ), // U+006A (j)
            image<8, 8>( 0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00 ), // U+006B (k)
            image<8, 8>( 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00 ), // U+006C (l)
            image<8, 8>( 0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00 ), // U+006D (m)
            image<8, 8>( 0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00 ), // U+006E (n)
            image<8, 8>( 0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00 ), // U+006F (o)
            image<8, 8>( 0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F ), // U+0070 (p)
            image<8, 8>( 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78 ), // U+0071 (q)
            image<8, 8>( 0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00 ), // U+0072 (r)
            image<8, 8>( 0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00 ), // U+0073 (s)
            image<8, 8>( 0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00 ), // U+0074 (t)
            image<8, 8>( 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00 ), // U+0075 (u)
            image<8, 8>( 0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00 ), // U+0076 (v)
            image<8, 8>( 0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00 ), // U+0077 (w)
            image<8, 8>( 0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00 ), // U+0078 (x)
            image<8, 8>( 0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F ), // U+0079 (y)
            image<8, 8>( 0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00 ), // U+007A (z)
            image<8, 8>( 0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00 ), // U+007B ({)
            image<8, 8>( 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00 ), // U+007C (|)
            image<8, 8>( 0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00 ), // U+007D (})
            image<8, 8>( 0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+007E (~)
            image<8, 8>( 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ), // U+007F
        };

    public:
        constexpr image<8, 8> const& operator[](const char c) const {
            return images[c & 0x7FU];
        }
    };
}

#endif //LLIB_FONT_HPP
